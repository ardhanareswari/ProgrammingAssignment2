> makeVector <- function(x = numeric()) {
+     m <- NULL
+     set <- function(y) {
+         x <<- y
+         m <<- NULL
+     }
+     get <- function() x
+     setmean <- function(mean) m <<- mean
+     getmean <- function() m
+     list(set = set, get = get,
+          setmean = setmean,
+          getmean = getmean)
+ }
> cachemean <- function(x, ...) {
+     m <- x$getmean()
+     if(!is.null(m)) {
+         message("getting cached data")
+         return(m)
+     }
+     data <- x$get()
+     m <- mean(data, ...)
+     x$setmean(m)
+     m
+ }
> source("cachemean.R")
> matrix(c(1,2,12,13), nrow = 2, ncol = 2)
     [,1] [,2]
[1,]    1   12
[2,]    2   13
> source("makeCacheMatrix.R")
> makeCacheMatrix()
$setMatrix
function (newValue) 
{
    x <<- newValue
    cache <<- NULL
}
<environment: 0x0000000008935c70>

$getMatrix
function () 
{
    x
}
<environment: 0x0000000008935c70>

$cacheInverse
function (solve) 
{
    cache <<- solve
}
<environment: 0x0000000008935c70>

$getInverse
function () 
{
    cache
}
<environment: 0x0000000008935c70>

> a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
> summary(a)
             Length Class  Mode    
setMatrix    1      -none- function
getMatrix    1      -none- function
cacheInverse 1      -none- function
getInverse   1      -none- function
> a$getMatrix()
     [,1] [,2]
[1,]    1   12
[2,]    2   13
> cacheSolve <- function(y, ...) {
+     # get the cached value
+     inverse <- y$getInverse()
+     # if a cached value exists return it
+     if(!is.null(inverse)) {
+         message("getting cached data")
+         return(inverse)
+     }
+     # otherwise get the matrix, caclulate the inverse and store it in
+     # the cache
+     data <- y$getMatrix()
+     inverse <- solve(data)
+     y$cacheInverse(inverse)
+     
+     # return the inverse
+     inverse
+ }
> 
> source("cachesolve.R")
> cacheSolve(a)
           [,1]        [,2]
[1,] -1.1818182  1.09090909
[2,]  0.1818182 -0.09090909
> cacheSolve(a)
getting cached data
           [,1]        [,2]
[1,] -1.1818182  1.09090909
[2,]  0.1818182 -0.09090909
